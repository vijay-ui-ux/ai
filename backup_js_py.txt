from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json
import spacy
import re

try:
    nlp = spacy.load("en_core_web_sm")  # Load the spaCy model
except OSError:
    print("Downloading spaCy model...")
    import subprocess
    subprocess.run(["python", "-m", "spacy", "download", "en_core_web_sm"])
    nlp = spacy.load("en_core_web_sm")

app = FastAPI()

origins = [
    "http://localhost:4200",  # Replace with your Angular app's URL
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    message: str

with open("javascript_functions.json", "r") as f:
    javascript_data = json.load(f)

def chatbot_response(user_input):
    user_input = user_input.lower()

    # 1. Check for simple keyword matches (greetings, farewells, etc.)
    weather_keywords = ["weather", "forecast", "temperature"]
    if any(word in user_input for word in weather_keywords):
        return {"response": "I'm not a weather expert, but you can check a weather app or website.", "code_snippet": None}

    farewells = ["bye", "goodbye", "see you later", "farewell", "take care"]
    if any(word in user_input for word in farewells):
        return {"response": "Goodbye! Have a great day.", "code_snippet": None}

    name_keywords = ["what is your name", "what's your name", "your name"]
    if any(phrase in user_input for phrase in name_keywords):
        return {"response": "I am a simple chatbot. I don't have a name.", "code_snippet": None}


    thanks_keywords = ["thank you", "thanks", "thank you very much", "thank you so much"]
    if any(phrase in user_input for phrase in thanks_keywords):
        return {"response": "You're welcome! If you have any more questions, feel free to ask.", "code_snippet": None}

    how_are_you_keywords = ["how are you", "how's it going", "are you well"]
    if any(phrase in user_input for phrase in how_are_you_keywords):
        return {"response": "I'm doing well, thank you! How about you?", "code_snippet": None}

    greetings = ["hello", "hi", "hey", "greetings", "good morning", "good afternoon", "good evening"]
    if any(word in user_input for word in greetings):
        return {"response": "Hi there! How can I help you?", "code_snippet": None}
    
    if re.search(r"\?", user_input):  # Check for a question mark
        return {"response": "That sounds like a question! I'll try my best to answer.", "code_snippet": None}

    # 2. Use spaCy for ALL questions
    user_doc = nlp(user_input)
    best_match = None
    best_similarity = 0

    for item in javascript_data["javascript_functions"]:
        query_doc = nlp(item["query"])
        similarity = user_doc.similarity(query_doc)

        # Give higher weight to exact matches (optional)
        if user_input == item["query"].lower():
            similarity += 0.2  # Adjust the weight as needed

        if similarity > best_similarity:
            best_similarity = similarity
            best_match = item

    if best_match and best_similarity > 0.5:  # Adjust threshold as needed
        return {"response": best_match["response"], "code_snippet": best_match["code_snippet"]}

    return {"response": "I couldn't find information on that.", "code_snippet": None}

@app.post("/api/chat")
async def chat(request: ChatRequest):
    user_input = request.message
    bot_response = chatbot_response(user_input)
    return bot_response

# To run: uvicorn main:app --reload
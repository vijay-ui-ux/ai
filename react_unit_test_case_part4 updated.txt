{
  "react_unit_test_cases": [
    {
      "query": "How do you enable fake timers in Jest?",
      "response": "You can enable fake timers by calling jest.useFakeTimers(). This replaces the original implementation of setTimeout() and other timer functions.",
      "code_snippet": "jest.useFakeTimers();"
    },
    {
      "query": "How can you fast-forward time in Jest tests?",
      "response": "You can fast-forward time by using jest.runAllTimers(). This will execute all pending timers.",
      "code_snippet": "jest.runAllTimers();"
    },
    {
      "query": "How do you handle recursive timers in Jest?",
      "response": "Use jest.runOnlyPendingTimers() to handle recursive timers. It runs only currently pending timers and avoids an infinite loop.",
      "code_snippet": "jest.runOnlyPendingTimers();"
    },
    {
      "query": "What function do you use to advance timers by a specific amount of time?",
      "response": "Use jest.advanceTimersByTime(msToRun) to advance all timers by the specified milliseconds.",
      "code_snippet": "jest.advanceTimersByTime(1000);"
    },
    {
      "query": "How can you clear all timers in Jest tests?",
      "response": "You can clear all timers with jest.clearAllTimers() to reset the state of timers.",
      "code_snippet": "jest.clearAllTimers();"
    },
    {
      "query": "What happens if I don't use jest.runOnlyPendingTimers() for recursive timers?",
      "response": "Without using jest.runOnlyPendingTimers(), running all timers could result in an error due to an infinite loop, especially with recursive timers.",
      "code_snippet": "jest.runOnlyPendingTimers();"
    },
    {
      "query": "How do you test a callback function after 1 second?",
      "response": "Use jest.useFakeTimers() and then use jest.runAllTimers() to ensure that the callback is called after 1 second.",
      "code_snippet": "jest.useFakeTimers();\ntimerGame(callback);\njest.runAllTimers();"
    },
    {
      "query": "Can I limit the number of timers Jest runs before an error?",
      "response": "Yes, you can set a timer limit with the timerLimit option when using jest.useFakeTimers().",
      "code_snippet": "jest.useFakeTimers({timerLimit: 100});"
    },
    {
      "query": "How do you test if a timer was called with a specific time?",
      "response": "Use jest.spyOn(global, 'setTimeout') to spy on setTimeout and check if it was called with the correct time.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nexpect(setTimeout).toHaveBeenCalledWith(expect.any(Function), 1000);"
    },
    {
      "query": "How do you simulate timers in Jest tests for recursive functions?",
      "response": "For recursive functions, you should mock timers carefully and use jest.runOnlyPendingTimers() to handle only those timers that are scheduled to run.",
      "code_snippet": "jest.useFakeTimers();\ninfiniteTimerGame(callback);\njest.runOnlyPendingTimers();"
    },
    {
      "query": "How can you test timers that are set with setInterval()?",
      "response": "To test setInterval(), use jest.spyOn(global, 'setInterval') and mock the behavior of setInterval with jest.useFakeTimers().",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nexpect(setInterval).toHaveBeenCalledWith(expect.any(Function), 1000);"
    },
    {
      "query": "How do you handle promises and async functions when using fake timers?",
      "response": "Promises and async functions still work with fake timers. Use jest.runAllTimers() to flush pending promises and timers.",
      "code_snippet": "jest.useFakeTimers();\nmyAsyncFunction().then(() => {});\njest.runAllTimers();"
    },
    {
      "query": "How do you use jest.useRealTimers()?",
      "response": "To restore the real timer implementations (e.g., setTimeout, setInterval), you can call jest.useRealTimers().",
      "code_snippet": "jest.useRealTimers();"
    },
    {
      "query": "Can you run specific timers with jest.advanceTimersByTime()?",
      "response": "Yes, jest.advanceTimersByTime() will advance all timers by a specific amount, but you cannot advance only one specific timer.",
      "code_snippet": "jest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you test that setTimeout is called only once?",
      "response": "To test that setTimeout is called only once, you can spy on it and use assertions to check the call count.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nexpect(setTimeout).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you test a function that waits for multiple timers?",
      "response": "You can test functions that wait for multiple timers by using jest.advanceTimersByTime() or jest.runAllTimers() in sequence to simulate time passing.",
      "code_snippet": "jest.useFakeTimers();\ntimerFunction();\njest.advanceTimersByTime(500);"
    },
    {
      "query": "How do you test for an error thrown in a timer callback?",
      "response": "Use jest.spyOn() to mock the timer, and use expect() to check if the error is thrown during the timer callback.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nexpect(() => { throw new Error() }).toThrow();"
    },
    {
      "query": "What is the purpose of jest.runTimersToTime()?",
      "response": "jest.runTimersToTime() runs all timers up to a specified amount of time. Itâ€™s useful when you want to run multiple timers but limit the time they run for.",
      "code_snippet": "jest.runTimersToTime(1000);"
    },
    {
      "query": "How do you test that timers work correctly with setInterval?",
      "response": "To test setInterval with jest, mock the interval function and use assertions to check that it was called the expected number of times.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nexpect(setInterval).toHaveBeenCalledTimes(3);"
    },
    {
      "query": "How do you use jest.runTimers() for a specific timeout?",
      "response": "Use jest.runTimers() to run specific timeouts instead of all pending timers. This allows for more granular control over the timers.",
      "code_snippet": "jest.runTimers(1000);"
    },
    {
      "query": "Can jest simulate timers for delayed promises?",
      "response": "Yes, jest can simulate delays for promises by using jest.useFakeTimers() along with jest.runAllTimers() to handle async code.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(() => {});\njest.runAllTimers();"
    },
    {
      "query": "How do you handle multiple timer intervals in a test?",
      "response": "To handle multiple intervals, use jest.advanceTimersByTime() multiple times or use jest.runOnlyPendingTimers() to control their execution.",
      "code_snippet": "jest.useFakeTimers();\nintervalFunction();\njest.advanceTimersByTime(500);"
    },
    {
      "query": "How do you test code that uses setTimeout() and promises together?",
      "response": "Combine jest.useFakeTimers() with promises and advance the timers as needed with jest.runAllTimers() to simulate time and resolve the promises.",
      "code_snippet": "jest.useFakeTimers();\npromiseWithTimeout();\njest.runAllTimers();"
    },
    {
      "query": "Can fake timers be used with all async operations in Jest?",
      "response": "Fake timers work with setTimeout, setInterval, and promise delays, but not directly with all async operations like fetch or other external async functions.",
      "code_snippet": "jest.useFakeTimers();\nfetchData().then(() => {});\njest.runAllTimers();"
    },
    {
      "query": "How do you simulate timer delays in Jest?",
      "response": "Simulate timer delays by using jest.useFakeTimers() and then advancing time with jest.advanceTimersByTime() or running all timers with jest.runAllTimers().",
      "code_snippet": "jest.useFakeTimers();\nsomeTimerFunction();\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you check if a timer was cancelled?",
      "response": "To check if a timer was cancelled, spy on the timer method and verify that it was not called after it was cleared.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\ncancelTimeout(timerId);\nexpect(setTimeout).not.toHaveBeenCalled();"
    },
    {
      "query": "What is jest.useFakeTimers({ legacyFakeTimers: true })?",
      "response": "The legacyFakeTimers option lets you use the older version of fake timers (before version 27), which might be necessary for compatibility with older code.",
      "code_snippet": "jest.useFakeTimers({ legacyFakeTimers: true });"
    },
    {
      "query": "How do you mock setInterval for a test?",
      "response": "To mock setInterval in Jest, use jest.spyOn() to monitor the calls to setInterval and check that it's being called the expected number of times.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nexpect(setInterval).toHaveBeenCalledTimes(5);"
    },
    {
      "query": "How can you test that setTimeout is called after a delay?",
      "response": "To test setTimeout delay, spy on setTimeout and use jest.advanceTimersByTime() to move time forward, then check if the callback was invoked.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nsetTimeout(callback, 2000);\njest.advanceTimersByTime(2000);\nexpect(callback).toHaveBeenCalled();"
    },
    {
      "query": "How can you simulate multiple timers running in parallel?",
      "response": "You can simulate multiple timers running in parallel by using jest.useFakeTimers() and advancing timers separately with jest.advanceTimersByTime().",
      "code_snippet": "jest.useFakeTimers();\ntimerFunctionOne();\ntimerFunctionTwo();\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "Can fake timers be used in a React component?",
      "response": "Yes, fake timers can be used in React tests to simulate setTimeout, setInterval, and other timer-based functions.",
      "code_snippet": "jest.useFakeTimers();\nrender(<MyComponent />);\njest.runAllTimers();"
    },
    {
      "query": "How do you mock timeouts in async functions using fake timers?",
      "response": "You can mock timeouts in async functions by using jest.useFakeTimers(), calling the async function, and then advancing the timers with jest.advanceTimersByTime() or jest.runAllTimers().",
      "code_snippet": "jest.useFakeTimers();\nasyncFunctionWithTimeout();\njest.advanceTimersByTime(500);"
    },
    {
      "query": "How do you check the interval delay when using setInterval in Jest?",
      "response": "Use jest.spyOn() to monitor the calls to setInterval and verify if it's called with the expected delay.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nexpect(setInterval).toHaveBeenCalledWith(expect.any(Function), 1000);"
    },
    {
      "query": "How do you simulate immediate setTimeout in Jest?",
      "response": "Use jest.advanceTimersByTime() to simulate immediate execution of setTimeout.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 0);\njest.advanceTimersByTime(0);"
    },
    {
      "query": "How do you ensure that timers are not called before a certain time?",
      "response": "Use jest.advanceTimersByTime() to make sure that no timer runs before the specified time.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 2000);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "What should you do if a timer callback throws an error in Jest?",
      "response": "You can use try-catch around the timer callback and assert that the error is thrown using expect().toThrow().",
      "code_snippet": "jest.useFakeTimers();\nexpect(() => { throw new Error('Timer Error'); }).toThrow();"
    },
    {
      "query": "Can you mock setTimeout with custom delay in Jest?",
      "response": "Yes, you can mock setTimeout with a custom delay by using jest.useFakeTimers() and specifying the delay in your test.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 2000);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you test that a timer does not run if cleared before execution?",
      "response": "Spy on the setTimeout method and call clearTimeout before advancing timers to ensure the timer was cleared.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nconst timeoutId = setTimeout(callback, 1000);\nclearTimeout(timeoutId);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How can you simulate an immediate call for multiple timers in Jest?",
      "response": "Use jest.runAllTimers() to simulate the immediate execution of all timers.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 1000);\nsetTimeout(callback2, 2000);\njest.runAllTimers();"
    },
    {
      "query": "Can you simulate multiple asynchronous operations using fake timers?",
      "response": "Yes, you can simulate multiple asynchronous operations by advancing time using jest.advanceTimersByTime() after each operation.",
      "code_snippet": "jest.useFakeTimers();\npromise1().then(callback1);\npromise2().then(callback2);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you test that an interval was cancelled after some time?",
      "response": "Use jest.spyOn() to monitor setInterval, and clear the interval in the test to assert that the interval was cancelled.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nconst intervalId = setInterval(callback, 1000);\nclearInterval(intervalId);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How can you test delayed callbacks using setTimeout and promises in Jest?",
      "response": "Use jest.useFakeTimers() to simulate the setTimeout delay, and run pending promises with jest.runAllTimers() to ensure the callbacks are called.",
      "code_snippet": "jest.useFakeTimers();\npromiseWithTimeout().then(callback);\njest.advanceTimersByTime(1000);\nexpect(callback).toHaveBeenCalled();"
    },
    {
      "query": "How can you mock the setInterval function to run only once in Jest?",
      "response": "Use jest.spyOn() to mock setInterval and ensure it runs only once by calling clearInterval after the first call.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\nclearInterval(intervalId);\nexpect(setInterval).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you test a function that calls setInterval repeatedly?",
      "response": "Use jest.spyOn() to monitor setInterval calls and use jest.advanceTimersByTime() to simulate multiple intervals.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nfunction intervalFunction() { setInterval(callback, 1000); }\nintervalFunction();\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you simulate multiple asynchronous timeouts and promises in Jest?",
      "response": "Simulate multiple asynchronous timeouts and promises by advancing time step by step with jest.advanceTimersByTime().",
      "code_snippet": "jest.useFakeTimers();\npromise1().then(callback1);\npromise2().then(callback2);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you ensure that timers run only when expected?",
      "response": "Use jest.advanceTimersByTime() or jest.runAllTimers() to control when the timers run and assert that they are executed only after the expected delay.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 1000);\njest.advanceTimersByTime(500);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How do you check if the timer callback was not called after clearing the timer?",
      "response": "Use jest.spyOn() to monitor the timer function and ensure that clearTimeout() prevents the callback from being called.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nconst timeoutId = setTimeout(callback, 1000);\nclearTimeout(timeoutId);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How do you simulate timers in multiple test cases?",
      "response": "You can simulate timers across multiple test cases by ensuring jest.useFakeTimers() is called at the start of each test and cleared using jest.clearAllTimers() at the end.",
      "code_snippet": "beforeEach(() => jest.useFakeTimers());\nafterEach(() => jest.clearAllTimers());"
    },
    {
      "query": "How do you handle timers in tests with nested setTimeout calls?",
      "response": "To handle nested setTimeout calls, you should manually advance timers in the order they are scheduled, using jest.advanceTimersByTime().",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(() => { setTimeout(callback, 500); }, 1000);\njest.advanceTimersByTime(1500);"
    },
    {
      "query": "How do you test a function that cancels a timer after a delay?",
      "response": "You can test this by calling clearTimeout in the test and ensuring that the callback does not get executed after the timer is cancelled.",
      "code_snippet": "jest.useFakeTimers();\nconst timeoutId = setTimeout(callback, 1000);\nclearTimeout(timeoutId);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How do you simulate an interval running in the background in Jest?",
      "response": "Simulate intervals running in the background by calling setInterval() in the test and using jest.advanceTimersByTime() to step through the time.",
      "code_snippet": "jest.useFakeTimers();\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test setTimeout with a callback that should not be invoked immediately?",
      "response": "Use jest.advanceTimersByTime() to ensure that setTimeout's callback is invoked only after the specified delay.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 2000);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How do you check if a promise resolves after a timeout?",
      "response": "Use jest.useFakeTimers() and then advance the time to simulate the timeout before asserting that the promise has resolved.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(() => { callback(); });\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How can you test a recurring setInterval timer?",
      "response": "Spy on setInterval() and advance the timers step by step using jest.advanceTimersByTime() to test the recurring execution.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you mock timer callbacks with delays in Jest?",
      "response": "You can mock timer callbacks by simulating their execution after the delay using jest.advanceTimersByTime() or jest.runAllTimers().",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 1000);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you ensure setTimeout is invoked after the specific delay?",
      "response": "You can check if setTimeout is invoked after a delay by using jest.spyOn() and verifying it was called with the correct delay.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nsetTimeout(callback, 1000);\njest.advanceTimersByTime(1000);\nexpect(setTimeout).toHaveBeenCalledWith(expect.any(Function), 1000);"
    },
    {
      "query": "How do you check if timers are called in the correct order?",
      "response": "Use jest.spyOn() and advance timers in steps to verify if the timers are executed in the expected order.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 500);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How can you test asynchronous code with fake timers?",
      "response": "Fake timers can be used for testing asynchronous code by combining jest.useFakeTimers() with jest.runAllTimers() or jest.advanceTimersByTime().",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(callback);\njest.runAllTimers();"
    },
    {
      "query": "How do you test multiple setTimeout calls with different delays in Jest?",
      "response": "You can test multiple setTimeout calls by advancing time incrementally and checking that each callback is invoked at the correct time.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you simulate a promise resolving after a timeout in Jest?",
      "response": "Use jest.useFakeTimers() to simulate the delay, and manually resolve the promise after advancing timers.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(callback);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you mock multiple timers set by setTimeout in Jest?",
      "response": "Use jest.spyOn() to monitor setTimeout and ensure multiple timers are called as expected, then simulate their execution.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test timers set within setInterval in Jest?",
      "response": "Spy on setInterval and then advance time using jest.advanceTimersByTime() to ensure that the interval executes as expected.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test that a timer is cleared after some time in Jest?",
      "response": "You can clear the timer and ensure that its callback does not execute by calling clearTimeout or clearInterval.",
      "code_snippet": "jest.useFakeTimers();\nconst timeoutId = setTimeout(callback, 1000);\nclearTimeout(timeoutId);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How do you ensure setInterval only runs once in Jest?",
      "response": "To ensure setInterval runs only once, mock setInterval and verify that it is called with the expected parameters and is cleared immediately.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\nclearInterval(intervalId);\nexpect(setInterval).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you test delayed function calls with setTimeout in Jest?",
      "response": "Use jest.useFakeTimers() to simulate time passing, ensuring that setTimeout behaves as expected.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 2000);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you test an interval that continues after a certain delay?",
      "response": "Spy on setInterval() and use jest.advanceTimersByTime() to simulate the time for multiple interval executions.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you mock setInterval to simulate immediate execution of the callback?",
      "response": "You can mock setInterval and use jest.runAllTimers() to immediately execute the callbacks.",
      "code_snippet": "jest.useFakeTimers();\nsetInterval(callback, 1000);\njest.runAllTimers();"
    },
    {
      "query": "How do you simulate a delay with promises and timers in Jest?",
      "response": "Simulate a delay in a promise by combining setTimeout with promises, using jest.advanceTimersByTime() to control the delay.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(callback);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you ensure a function is not called before a timeout in Jest?",
      "response": "You can ensure that a function is not called before the timeout by advancing the timers using jest.advanceTimersByTime() and verifying that the callback has not been invoked.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 2000);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How do you simulate a timeout function inside a promise?",
      "response": "You can simulate the timeout inside a promise by using jest.useFakeTimers() and advancing time for each timeout.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(() => { setTimeout(callback, 1000); });\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you test setTimeout with a callback that should be invoked after a delay?",
      "response": "Use jest.advanceTimersByTime() to ensure the callback is invoked after the specified delay.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback, 1000);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you simulate multiple setTimeout calls with decreasing delays?",
      "response": "Use jest.advanceTimersByTime() to incrementally trigger multiple setTimeout callbacks with different delays.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 3000);\nsetTimeout(callback2, 2000);\nsetTimeout(callback3, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you ensure that a timer only fires once in Jest?",
      "response": "Mock setTimeout/setInterval and verify that it is only invoked once using jest.spyOn().",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nsetTimeout(callback, 1000);\njest.advanceTimersByTime(1000);\nexpect(setTimeout).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you test a delayed callback that should only execute once?",
      "response": "Use jest.spyOn() to monitor the setTimeout/setInterval and ensure the callback only executes once after the delay.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nsetTimeout(callback, 1000);\njest.advanceTimersByTime(1000);\nexpect(callback).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you mock a delay for a recurring setInterval function?",
      "response": "Mock setInterval and use jest.advanceTimersByTime() to simulate multiple intervals with different delays.",
      "code_snippet": "jest.useFakeTimers();\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you simulate a timeout with promises and multiple setTimeout calls?",
      "response": "You can combine setTimeout with promises, using jest.advanceTimersByTime() to simulate the delays for each setTimeout.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(() => setTimeout(callback1, 1000));\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you simulate asynchronous calls with multiple setTimeout functions?",
      "response": "You can simulate asynchronous calls with multiple setTimeout functions by advancing time incrementally using jest.advanceTimersByTime().",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you ensure timers execute in the expected order in Jest?",
      "response": "You can ensure timers execute in the correct order by advancing timers incrementally and checking the execution sequence.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test setInterval with a recurring callback that fires after a specific delay?",
      "response": "You can test setInterval by using jest.advanceTimersByTime() to simulate its periodic firing after the given delay.",
      "code_snippet": "jest.useFakeTimers();\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you verify if timers are fired in sequence and not prematurely in Jest?",
      "response": "You can check if timers are fired in sequence by using jest.advanceTimersByTime() and verifying each callbackâ€™s execution order.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you simulate delays for multiple promises in Jest?",
      "response": "You can simulate delays for multiple promises by using jest.advanceTimersByTime() after each promise to control their resolution order.",
      "code_snippet": "jest.useFakeTimers();\npromise1().then(callback1);\npromise2().then(callback2);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you test setTimeout with multiple promises that resolve at different times?",
      "response": "Use jest.advanceTimersByTime() to simulate the passing of time and resolve promises in sequence.",
      "code_snippet": "jest.useFakeTimers();\npromise1().then(callback1);\npromise2().then(callback2);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you test asynchronous functions that are delayed with setTimeout in Jest?",
      "response": "Use jest.useFakeTimers() to mock the passage of time and ensure the asynchronous functions behave as expected.",
      "code_snippet": "jest.useFakeTimers();\nasyncFunction().then(callback);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you ensure setTimeout callback is called once after the timeout?",
      "response": "You can ensure that setTimeout is called once by using jest.spyOn() and verifying the callback is invoked once.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nsetTimeout(callback, 1000);\njest.advanceTimersByTime(1000);\nexpect(callback).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you mock and test recursive setInterval calls in Jest?",
      "response": "You can mock setInterval with jest.spyOn() and control the intervals with jest.advanceTimersByTime() to ensure correct behavior.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test a function that fires a timer inside a promise in Jest?",
      "response": "Simulate the timer firing inside the promise by using jest.advanceTimersByTime() to test the promise resolution.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(() => { setTimeout(callback, 1000); });\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you test a setTimeout function that should be called multiple times in sequence?",
      "response": "Set multiple setTimeout calls and use jest.advanceTimersByTime() to simulate each timeout firing sequentially.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\nsetTimeout(callback3, 3000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test a setTimeout function that is cleared before it fires?",
      "response": "Clear the timeout using clearTimeout() and check that the callback has not been invoked after advancing time.",
      "code_snippet": "jest.useFakeTimers();\nconst timeoutId = setTimeout(callback, 1000);\nclearTimeout(timeoutId);\njest.advanceTimersByTime(1000);\nexpect(callback).not.toHaveBeenCalled();"
    },
    {
      "query": "How do you test multiple setTimeout calls with different delays?",
      "response": "You can test multiple setTimeout calls by using jest.advanceTimersByTime() and verifying that each callback is called at the correct time.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you test setInterval calls that should stop after a condition is met?",
      "response": "Use clearInterval() to stop the interval and verify that the callback does not execute after the interval is cleared.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nconst intervalId = setInterval(callback, 1000);\nclearInterval(intervalId);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you mock setInterval calls that should be triggered only once?",
      "response": "Mock setInterval using jest.spyOn() and ensure that it is only called once using jest.advanceTimersByTime() and assertions.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\njest.advanceTimersByTime(1000);\nexpect(setInterval).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you test if a function with setInterval is repeatedly called within a time period?",
      "response": "Use jest.spyOn() to mock setInterval, then use jest.advanceTimersByTime() to simulate the repeated calls within the time period.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nsetInterval(callback, 1000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test multiple functions that use setTimeout with varying time delays?",
      "response": "Mock each setTimeout with jest.spyOn(), and advance the timers using jest.advanceTimersByTime() to control when each callback is executed.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\nsetTimeout(callback3, 3000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test a function that calls setTimeout inside another setTimeout?",
      "response": "You can test nested setTimeout calls by advancing timers for both timeouts using jest.advanceTimersByTime().",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(() => { setTimeout(callback, 1000); }, 1000);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you test a delay function that should reject after a timeout in Jest?",
      "response": "Use jest.useFakeTimers() and advance the timers to simulate the rejection of a promise after a timeout.",
      "code_snippet": "jest.useFakeTimers();\nasyncFunction().catch(() => callback);\njest.advanceTimersByTime(1000);"
    },
    {
      "query": "How do you test a callback that should run after a series of setTimeout calls?",
      "response": "Use jest.advanceTimersByTime() to simulate time and check that the callback runs after all setTimeout functions complete.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you simulate timers and promises that resolve after multiple steps?",
      "response": "Combine setTimeout with promises and use jest.advanceTimersByTime() to simulate the series of actions and delays.",
      "code_snippet": "jest.useFakeTimers();\npromiseFunction().then(() => setTimeout(callback1, 1000));\nsetTimeout(callback2, 2000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you simulate setTimeout for a function that should execute multiple times in Jest?",
      "response": "Set multiple setTimeout calls and advance timers in steps to check each function executes at the correct time.",
      "code_snippet": "jest.useFakeTimers();\nsetTimeout(callback1, 1000);\nsetTimeout(callback2, 2000);\nsetTimeout(callback3, 3000);\njest.advanceTimersByTime(3000);"
    },
    {
      "query": "How do you test that setTimeout is called only once even when multiple calls are made?",
      "response": "Mock setTimeout and ensure it is called only once using jest.spyOn() and jest.advanceTimersByTime() to advance time.",
      "code_snippet": "jest.spyOn(global, 'setTimeout');\nsetTimeout(callback, 1000);\nsetTimeout(callback, 2000);\njest.advanceTimersByTime(2000);\nexpect(setTimeout).toHaveBeenCalledTimes(1);"
    },
    {
      "query": "How do you simulate timers when multiple promises are used with different timeouts?",
      "response": "Use jest.advanceTimersByTime() to resolve multiple promises with different timeouts and ensure they resolve correctly.",
      "code_snippet": "jest.useFakeTimers();\npromise1().then(callback1);\npromise2().then(callback2);\njest.advanceTimersByTime(2000);"
    },
    {
      "query": "How do you test setInterval when the interval is cleared during execution?",
      "response": "Use jest.spyOn() to spy on setInterval and use clearInterval to stop the interval at a specific point in time.",
      "code_snippet": "jest.spyOn(global, 'setInterval');\nconst intervalId = setInterval(callback, 1000);\nclearInterval(intervalId);\njest.advanceTimersByTime(2000);"
    }
  ]
}

